/*
 * File: Auth.js
 * Project: react-blog
 * Created: Tuesday, May 3rd 2022, 3:27:15 pm
 * Last Modified: Thursday, July 28th 2022, 2:10:48 pm
 * Copyright © 2022 AMDE Agência
 */

import React, {useEffect, useState} from 'react'
import {Link, Redirect, useLocation, useParams} from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'

function Auth() {
  const location = useLocation()
  const params = useParams()
  const isLoginPath = location.pathname === '/login'
  const apiURL = isLoginPath ? '/users/login' : '/users'
  const pageName = isLoginPath ? 'Sign in' : 'Register'
  const pageMessage = isLoginPath ? 'Need and account?' : 'Have an account?'
  const pageLink = isLoginPath ? '/register' : '/login'

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [username, setUsername] = useState('')
  const [isSubmit, setIsSubmit] = useState(false)
  const [{isLoading, response, error}, doFetch] = useFetch(apiURL)
  const [token, setToken] = useLocalStorage('token')

  /**
   * We want to fetch data from different URLs. This means that we want to define the URL
   * We want to make fetch sometimes on initialize (like in global feed) and sometimes on form submit (like in login form)
   * We want to get the isLoading state to know that we are in the process of getting data and show it to the user accordingly
   * We want to get errors to show something to the user if the API call is not successful
   */

  const onSubmit = (event) => {
    event.preventDefault()
    const user = isLoginPath ? {email, password} : {email, password, username}
    doFetch({
      method: 'post',
      data: {
        user,
      },
    })
  }

  /**
   * Use only when the response wasn´t null
   * Then, redirect user to the homepage using declarative way rather then imperative
   */
  useEffect(() => {
    if (!response) {
      return
    }

    setToken(response.user.token)
    setIsSubmit(true)
  }, [response])

  if (isSubmit) {
    return <Redirect to="/" />
  }

  return (
    <div className="auth-page">
      <div className="container page">
        <div className="row">
          <div className="col-md-6 offset-md-3 col-xs-12">
            <div className="text-xs-center">
              <h1>{pageName}</h1>
              <p>
                <Link to={pageLink}>{pageMessage}</Link>
              </p>
              <form onSubmit={onSubmit}>
                <fieldset>
                  {!isLoginPath && (
                    <fieldset className="form-group">
                      <input
                        type="text"
                        className="form-control form-control-lg"
                        placeholder="Username"
                        value={username}
                        onChange={(event) => setUsername(event.target.value)}
                      />
                    </fieldset>
                  )}
                  <fieldset className="form-group">
                    <input
                      type="email"
                      className="form-control form-control-lg"
                      placeholder="Email"
                      value={email}
                      onChange={(event) => setEmail(event.target.value)}
                    />
                  </fieldset>
                  <fieldset className="form-group">
                    <input
                      type="password"
                      className="form-control form-control-lg"
                      placeholder="Password"
                      value={password}
                      onChange={(event) => setPassword(event.target.value)}
                    />
                  </fieldset>
                  <button
                    disabled={isLoading}
                    className="btn btn-lg btn-primary"
                    type="submit"
                  >
                    {pageName}
                  </button>
                </fieldset>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Auth
