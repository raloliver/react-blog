/*
 * File: useFetch.js
 * Project: react-blog
 * Created: Tuesday, May 3rd 2022, 10:11:22 pm
 * Last Modified: Thursday, August 10th 2023, 5:22:06 am
 * Copyright © 2022 AMDE Agência
 */

import {useState, useEffect, useCallback} from 'react'
import axios from 'axios'
import useLocalStorage from 'hooks/useLocalStorage'

export default (endpoint) => {
  const baseUrl = 'http://localhost:3000/api'
  const [isLoading, setIsLoading] = useState(false)
  const [response, setResponse] = useState(null)
  const [error, setError] = useState(null)
  const [options, setOptions] = useState({})
  const [token] = useLocalStorage('token')

  /**
   * useCallback hook It returned memoized (cached) function. That will only change when the dependencies change. The array after named dependencies arrays.
   */
  const doFetch = useCallback((options = {}) => {
    setOptions(options)
    setIsLoading(true)
  }, [])

  useEffect(() => {
    if (!isLoading) {
      return
    }

    const requestOptions = {
      ...options,
      ...{
        headers: {
          authorization: token ? `Token ${token}` : '',
        },
      },
    }

    axios(baseUrl + endpoint, requestOptions)
      .then((user) => {
        setResponse(user.data)
        setIsLoading(false)
      })
      .catch((error) => {
        setError(error.response.data)
        setIsLoading(false)
      })
  }, [isLoading, endpoint, options])

  return [{isLoading, response, error}, doFetch]
}
